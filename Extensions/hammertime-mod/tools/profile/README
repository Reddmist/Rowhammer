Hammertime `profile' --- a geometry-aware Rowhammer memory profiler
====================================================

Building
--------

Dependencies:
 - recent(ish) GNU/Linux
 - GNU libc (w/ pthread support)

* run `make'
* (optionally) run `make cap' as root to set the required capabilities on the binary, allowing it to run as a normal user


Running
-------

Usage: profile -s <buffer_size> [-hvdpwalHi] [-O<2sd>] [-W <window_radius>] [-D <target_distance>] [-I <refresh_intervals>] [-P <victim_pattern>][-T <target_pattern>] [-g <pressure_gran>] MSYS_FILE [OUT_FILE]

Numeric arguments are assumed to be decimal, unless prefixed by `0' or `0x' in which case octal and, hexadecimal is assumed, respectively.
Options:
	-s SIZE		(Required) use SIZE bytes as the profiling buffer; can have 'K', 'M', 'G' or 'T' suffix (for KiB, MiB, GiB or TiB)
	-W RADIUS	set the hammering window to 2*RADIUS + 1. The larger the window, the more adjacent rows are available for bit flip checking. How exactly rows are selected for hammering/checking within a window is up to the hammer algorithm. Minimum (and default): 1.
	-D DIST		set distance between dual-sided hammer targets to DIST rows. Default: 1
	-I COUNT	hammer each row set for COUNT refresh intervals. Default 3.
	-P PATTERN	set victim fill pattern to PATTERN. Expects a hexadecimal number of even length (representing fill bytes)
	-T PATTERN	set target fill pattern to PATTERN. Same rules apply as for -P
	-g GRAN		(requires '-p') override the pressure thread granularity to the GRAN'th least significant bit. Default is to auto-detect based on memory geometry.
	-O FLAGS	specify hammering options (default is equivalent to '-Od')
			FLAGS:
				- `2' --- enable single-thread simultaneous dual-channel hammering (EXPERIMENTAL!)
				- `s' --- enable single-sided rowhammer test
				- `d' --- enable dual-sided rowhammer test

	-l		(Recommended) lock the memory buffers to RAM. May fail due to missing permissions or ulimits
	-H		(Recommended) allocate buffers using hugetlb pages. Specify twice to force request 1GB pages for the main buffer, instead of the system default huge pages. Pressure buffers always ignore the 1GB hint. Please note that this is *not* the same thing as transparent huge pages and may require additional host configuration; see https://www.kernel.org/doc/Documentation/vm/hugetlbpage.txt for more details on how to set up hugetlb pages.
	-p		apply pressure to the memory controller. Can be specified multiple times to increase pressure
	-w		(requires '-p') use sequential ("walking") memory accesses when applying pressure
	-a		Auto-pressure. Issue synchronous reads that trigger bank conflicts during hammering; this is intended as a smart(ish) way to force the controller into auto-precharging read rows for single-sided hammering. This is a separate feature from -p
	-i		also hammer with bit-inverted data patterns
	-d		dry run. Allocate all buffers and perform calibrations, but return before doing any hammering
	-v		be more verbose. Can be specified multiple times to increase verbosity

	MSYS_FILE	(Required) path to file describing memory system. Use '-' to read from stdin
	OUT_FILE	if provided, will be used for output instead of stdout


Output format
-------------
All output numbers and addresses are in hexadecimal format.

DRAM addresses are in the following format (sans quotes):
`(<channel> <dimm> <rank> <bank> <row> <col>)'
or
`<virt_p> <length> (<channel> <dimm> <rank> <bank> <row> <col>)'
if -vv is specified.

Output consists of hammer test entries (one per line) in the format:
DRAM_TARGET1 [DRAM_TARGET2 ...] : DRAM_VICTIM1 FLIP1 [FLIP2 ...] [DRAM_VICTIM2 FLIP1 [FLIP2 ...] ...]

DRAM_TARGET* and DRAM_VICTIM* are DRAM addresses, as described above.
The same DRAM_VICTIM* address may appear more than once within a hammer test entry.

FLIP* entries describe bitflips within a physical row (i.e. channel-dimm-rank-bank-row tuple).
Format is OOOO|VV|EE, where:
OOOO --- byte offset of the bitflip relative to DRAM_VICTIM* (hex; <= row size (usually 0x2000 bytes); fixed width 4)
VV --- byte value after bit flip (hex; fixed width 2)
EE --- byte expected according to fill pattern (hex; fixed width 2)

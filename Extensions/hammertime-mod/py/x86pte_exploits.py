#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Copyright (c) 2016 Andrei Tatar
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys

import pyramses
from hammertime import profile
from hammertime import estimate


class ClearNX(estimate.ExploitModel):
    """Exploit that clears the NX bit in a PTE"""
    def check_page(self, vpage):
        useful = [x for x in vpage.pulldowns if x.page_offset % 8 == 7 and x.mask == 0b10000000]
        return len(useful) > 0


class SetRW(estimate.ExploitModel):
    """Exploit that sets the R/W bit making a page writable"""
    def check_page(self, vpage):
        useful = [x for x in vpage.pullups if x.page_offset % 8 == 0 and x.mask == 0b00000010]
        return len(useful) > 0


class SetUS(estimate.ExploitModel):
    """Exploit that sets the U/S bit making the page available from userspace"""
    def check_page(self, vpage):
        useful = [x for x in vpage.pullups if x.page_offset % 8 == 0 and x.mask == 0b00000100]
        return len(useful) > 0


class FlipPFN(estimate.ExploitModel):
    """Exploit that changes the PFN in a page table entry, redirecting memory accesses"""

    def __init__(self, totalmem=(8 << 30)):
        self.pfnbits = totalmem.bit_length() - 12

    def check_page(self, vpage):
        bits_left = self.pfnbits
        useful = [
            x for x in vpage.pullups | vpage.pulldowns
            if x.page_offset % 8 == 1 and (x.mask & 0b11110000)
        ]
        bits_left -= 4
        off = 2
        while bits_left // 8 > 0:
            useful.extend(x for x in vpage.pullups | vpage.pulldowns if x.page_offset == off)
            off += 1
            bits_left -= 8
        if bits_left:
            bmask = 2**bits_left - 1
            useful.extend(
                x for x in vpage.pullups | vpage.pulldowns
                if (x.page_offset == off and (x.mask & bmask))
            )
        return len(useful) > 0


if __name__ == '__main__':
    if len(sys.argv) < 3:
        print("Missing arguments")
        print("usage: {} PROFILE_PATH MSYS_PATH [MEM_GB]".format(sys.argv[0]))
    else:
        ftbl = profile.profile2fliptable(sys.argv[1])
        msys = pyramses.MemorySystem()
        msys.load_file(sys.argv[2])
        est = estimate.FliptableEstimator(ftbl, msys)
        print('ClearNX')
        est.run_exploit(ClearNX())
        est.print_stats()
        print('\nSetRW')
        est.run_exploit(SetRW())
        est.print_stats()
        print('\nSetUS')
        est.run_exploit(SetUS())
        est.print_stats()
        print('\nFlipPFN')
        if len(sys.argv) >= 4:
            sz = int(sys.argv[3]) << 30
            est.run_exploit(FlipPFN(sz))
            est.print_stats()
        else:
            est.run_exploit(FlipPFN(msys.max_memory))
            est.print_stats()
